{
	"TypeORM_Project": [
		{
			"scope": "typescript",
			"prefix": "Base Entity Class TypeORM",
			"body": [
				"import { CreateDateColumn, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm'",
				"\n",
				"/**",
				" * @author Carlos Páez",
				" */",
				"export abstract class BaseEntity {",
				"\t@PrimaryGeneratedColumn('uuid')",
				"\tid!: string",
				"",
				"\t@CreateDateColumn({",
				"\t\tname: 'created_at',",
				"\t\ttype: 'timestamp'",
				"\t})",
				"\tcreatedAt!: Date",
				"",
				"\t@UpdateDateColumn({",
				"\t\tname: 'updated_at',",
				"\t\ttype: 'timestamp'",
				"\t})",
				"\tupdatedAt!: Date",
				"}"
			],
			"description": "Base Entity Class TypeORM with decorators"
		},
		{
			"scope": "typescript",
			"prefix": "Entity Class TypeORM",
			"body": [
				"import { Column, Entity } from 'typeorm'",
				"\n",
				"/**",
				" * @author Carlos Páez",
				" */",
				"@Entity({ name: '${1:table_name}' })",
				"export class ${2:Class}Entity extends ${3:BaseEntity} {",
				"\t@Column()",
				"\t${4:property}: ${5:type}",
				"}"
			],
			"description": "Entity Class TypeORM with decorators"
		},
		{
			"scope": "typescript",
			"prefix": "Base DTO Class TypeORM",
			"body": [
				"import { IsDate, IsOptional, IsUUID } from 'class-validator'",
				"\n",
				"/**",
				" * @author Carlos Páez",
				" */",
				"export class BaseDTO {",
				"\t@IsUUID()",
				"\t@IsOptional()",
				"\tid!: string",
				"",
				"\t@IsDate()",
				"\t@IsOptional()",
				"\tcreatedAt!: Date",
				"",
				"\t@IsDate()",
				"\t@IsOptional()",
				"\tupdatedAt!: Date",
				"}",
			],
			"description": "Base DTO Class TypeORM with decorators"
		},
		{
			"scope": "typescript",
			"prefix": "DTO Class TypeORM",
			"body": [
				"import { IsNotEmpty } from 'class-validator'",
				"\n",
				"/**",
				" * @author Carlos Páez",
				" */",
				"export class ${1:Class}DTO extends ${2:BaseDTO} {",
				"\t@IsNotEmpty()",
				"\t${3:property}!: ${4:type}",
				"}"
			],
			"description": "DTO Class TypeORM with decorators"
		},
		{
			"scope": "typescript",
			"prefix": "Base Service Class TypeORM",
			"body": [
				"import { EntityTarget, Repository } from 'typeorm'",
				"\n",
				"/**",
				" * @author Carlos Páez",
				" */",
				"export class BaseService<T extends ${1:BaseEntity}> extends ${2:ConfigServer} {",
				"\tpublic execRepository: Promise<Repository<T>>",
				"",
				"\tconstructor(private _getEntity: EntityTarget<T>) {",
				"\t\tsuper()",
				"\t\tthis.execRepository = this.initRepository(_getEntity)",
				"\t}",
				"",
				"\tpublic async initRepository<T>(entity: EntityTarget<T>): Promise<Repository<T>> {",
				"\t\tconst getConnection = await this.dbConnection",
				"\t\treturn getConnection.getRepository(entity)",
				"\t}",
				"}"
			],
			"description": "Base Service Class TypeORM"
		},
		{
			"scope": "typescript",
			"prefix": "Service Class TypeORM",
			"body": [
				"import { UpdateResult, DeleteResult } from 'typeorm'",
				"\n",
				"/**",
				" * @author Carlos Páez",
				" */",
				"export class ${1:Class}Service extends BaseService<${2:Class}Entity> {",
				"\tconstructor() {",
				"\t\tsuper(${2:Class}Entity)",
				"\t}",
				"",
				"\tpublic async findAll${4:Elements}(): Promise<${2:Class}Entity[]> {",
				"\t\treturn (await this.execRepository).find()",
				"\t}",
				"",
				"\tpublic async find${5:Element}ById(id: string): Promise<${2:Class}Entity | null> {",
				"\t\treturn (await this.execRepository).findOneBy({ id })",
				"\t}",
				"",
				"\tpublic async create${5:Element}(body: ${3:Class}DTO): Promise<${2:Class}Entity> {",
				"\t\treturn (await this.execRepository).save(body)",
				"\t}",
				"",
				"\tpublic async update${5:Element}(id: string, infoUpdate: ${3:Class}DTO): Promise<UpdateResult> {",
				"\t\treturn (await this.execRepository).update(id, infoUpdate)",
				"\t}",
				"",
				"\tpublic async delete${5:Element}(id: string): Promise<DeleteResult> {",
				"\t\treturn (await this.execRepository).delete({ id })",
				"\t}",
				"}"
			],
			"description": "Service Class TypeORM"
		},
		{
			"scope": "typescript",
			"prefix": "Controller Class TypeORM",
			"body": [
				"import { Request, Response } from 'express';",
				"import { red } from 'colors';",
				"\n",
				"/**",
				" * @author Carlos Páez",
				" */",
				"export class ${1:Class}Controller {",
				"\tconstructor(",
				"\t\tprivate readonly _${2:var}Service: ${1:Class}Service = new ${1:Class}Service(),",
				"\t\tprivate readonly _httpResponse: HttpResponse = new HttpResponse()",
				"\t) { }",
				"",
				"\tpublic async findAll${3:Elements}(req: Request, res: Response): Promise<unknown> {",
				"\t\ttry {",
				"\t\t\tconst data = await this._${2:var}Service.findAll${3:Elements}()",
				"",
				"\t\t\tif (!data.length) return this._httpResponse.NotFound(res, 'No hay resultados')",
				"",
				"\t\t\treturn this._httpResponse.Ok(res, data)",
				"\t\t} catch (error) {",
				"\t\t\tconsole.log(red('Error in ${1:Class}Controller: '), error)",
				"\t\t\treturn this._httpResponse.InternalServerError(res, error)",
				"\t\t}",
				"\t}",
				"",
				"\tpublic async find${4:Element}ById(req: Request, res: Response): Promise<unknown> {",
				"\t\ttry {",
				"\t\t\tconst { id } = req.params",
				"",
				"\t\t\tconst data = await this._${2:var}Service.find${4:Element}ById(id)",
				"",
				"\t\t\tif (!data) return this._httpResponse.BadRequest(res, `No hay resultados para el id '${${id}}'`)",
				"",
				"\t\t\treturn this._httpResponse.Ok(res, data)",
				"\t\t} catch (error) {",
				"\t\t\tconsole.log(red('Error in ${1:Class}Controller: '), error)",
				"\t\t\treturn this._httpResponse.InternalServerError(res, error)",
				"\t\t}",
				"\t}",
				"",
				"\tpublic async create${4:Element}(req: Request, res: Response): Promise<unknown> {",
				"\t\ttry {",
				"\t\t\tconst data = await this._${2:var}Service.create${4:Element}({ ...req.body })",
				"",
				"\t\t\treturn this._httpResponse.Created(res, data)",
				"\t\t} catch (error) {",
				"\t\t\tconsole.log(red('Error in ${1:Class}Controller: '), error)",
				"\t\t\treturn this._httpResponse.InternalServerError(res, error)",
				"\t\t}",
				"\t}",
				"",
				"\tpublic async update${4:Element}(req: Request, res: Response): Promise<unknown> {",
				"\t\ttry {",
				"\t\t\tconst { id } = req.params",
				"",
				"\t\t\tconst data = await this._${2:var}Service.update${4:Element}(id, { ...req.body })",
				"",
				"\t\t\tif (!data.affected) return this._httpResponse.BadRequest(res, 'No se han aplicado los cambios')",
				"",
				"\t\t\treturn this._httpResponse.Ok(res, data)",
				"\t\t} catch (error) {",
				"\t\t\tconsole.log(red('Error in ${1:Class}Controller: '), error)",
				"\t\t\treturn this._httpResponse.InternalServerError(res, error)",
				"\t\t}",
				"\t}",
				"",
				"\tpublic async delete${4:Element}(req: Request, res: Response): Promise<unknown> {",
				"\t\ttry {",
				"\t\t\tconst { id } = req.params",
				"",
				"\t\t\tconst data = await this._${2:var}Service.delete${4:Element}(id)",
				"",
				"\t\t\tif (!data.affected) return this._httpResponse.BadRequest(res, 'No se han aplicado los cambios')",
				"",
				"\t\t\treturn this._httpResponse.Ok(res, data)",
				"\t\t} catch (error) {",
				"\t\t\tconsole.log(red('Error in ${1:Class}Controller: '), error)",
				"\t\t\treturn this._httpResponse.InternalServerError(res, error)",
				"\t\t}",
				"\t}",
				"}",
			],
			"description": "Controller Class TypeORM"
		},
		{
			"scope": "typescript",
			"prefix": "Base Router Class TypeORM",
			"body": [
				"import { Router } from 'express'",
				"\n",
				"/**",
				" * @author Carlos Páez",
				" */",
				"export class BaseRouter<T> {",
				"\tpublic router: Router",
				"\tpublic controller: T",
				"",
				"\tconstructor(TController: { new(): T }) {",
				"\t\tthis.router = Router()",
				"\t\tthis.controller = new TController()",
				"",
				"\t\tthis.routes()",
				"\t}",
				"",
				"\tprotected routes(): void { }",
				"}",
			],
			"description": "Base Router Class TypeORM"
		},
		{
			"scope": "typescript",
			"prefix": "Router Class TypeORM",
			"body": [
				"import { Request, Response } from 'express'",
				"\n",
				"/**",
				" * @author Carlos Páez",
				" */",
				"export class ${1:Class}Router extends BaseRouter<${1:Class}Controller> {",
				"\tconstructor() {",
				"\t\tsuper(${1:Class}Controller)",
				"\t}",
				"",
				"\tprotected routes(): void {",
				"\t\tthis.router.get('/${2:Plural}', (req: Request, res: Response) => this.controller.findAll${3:Elements}(req, res))",
				"\t\tthis.router.get('/${2:Plural}/:id', (req: Request, res: Response) => this.controller.find${1:Class}ById(req, res))",
				"\t\tthis.router.post('/create-${4:Singular}', (req: Request, res: Response) => this.controller.create${1:Class}(req, res))",
				"\t\tthis.router.put('/update-${4:Singular}/:id', (req: Request, res: Response) => this.controller.update${1:Class}(req, res))",
				"\t\tthis.router.delete('/delete-${4:Singular}/:id', (req: Request, res: Response) => this.controller.delete${1:Class}(req, res))",
				"\t}",
				"}",
			],
			"description": "Router Class TypeORM"
		},
		{
			"scope": "typescript",
			"prefix": "Middleware Class TypeORM",
			"body": [
				"import { validate } from 'class-validator'"
				"import { NextFunction, Request, Response } from 'express'",
				"\n",
				"/**",
				" * @author Carlos Páez",
				" */",
				"export class ${1:Class}Middleware {",
				"\tconstructor(private readonly _httpResponse: HttpResponse = new HttpResponse()) { }",
				"",
				"\t${2:entity}Validator(req: Request, res: Response, next: NextFunction) {",
				"\t\tconst { ${3:values} } = req.body",
				"",
				"\t\tconst valid = new ${1:Class}DTO()",
				"",
				"\t\tvalid.${4:property} = ${4:property}",
				"",
				"\t\tvalidate(valid).then((error) => {",
				"\t\t\treturn error.length ? this._httpResponse.BadRequest(res, error) : next()",
				"\t\t})",
				"\t}",
				"}"
			],
			"description": "Middleware Class TypeORM"
		}
	],
	"REST": {
		"scope": "rest,http",
		"prefix": "REST API",
		"body": [
			"GET http://localhost:8000/api/${1:BasePlural}",
			"",
			"################################################################################",
			"",
			"GET http://localhost:8000/api/${1:BasePlural}/${ID}",
			"",
			"################################################################################",
			"",
			"POST http://localhost:8000/api/create-${2:BaseSingular}",
			"Content-Type: application/json",
			"",
			"{",
			"\t\"${3:Key}\": \"${4:Value}\"",
			"}",
			"",
			"################################################################################",
			"",
			"PUT http://localhost:8000/api/update-${2:BaseSingular}/${ID}",
			"Content-Type: application/json",
			"",
			"{",
			"\t\"${3:Key}\": \"${4:Value}\"",
			"}",
			"",
			"################################################################################",
			"",
			"DELETE http://localhost:8000/api/delete-${2:BaseSingular}/${ID}"
		],
		"description": "REST API (GET, POST, PUT, DELETE)"
	}
}